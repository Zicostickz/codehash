;; marketplace.clar
;;
;; This contract implements a decentralized marketplace for smart contract templates
;; on the Stacks blockchain, enabling developers to create, share, and monetize
;; reusable smart contract components.
;;
;; The contract handles the economic transactions between template creators and users,
;; manages different pricing models, and enforces access rights to purchased templates.

;; Error codes
(define-constant ERR-NOT-AUTHORIZED (err u100))
(define-constant ERR-TEMPLATE-NOT-FOUND (err u101))
(define-constant ERR-INVALID-PRICE (err u102))
(define-constant ERR-PAYMENT-FAILED (err u103))
(define-constant ERR-ACCESS-DENIED (err u104))
(define-constant ERR-INVALID-PARAM (err u105))
(define-constant ERR-NOT-FOR-SALE (err u106))
(define-constant ERR-ALREADY-PURCHASED (err u107))
(define-constant ERR-INVALID-LICENSING-MODEL (err u108))
(define-constant ERR-SUBSCRIPTION-EXPIRED (err u109))
(define-constant ERR-INSUFFICIENT-FUNDS (err u110))
(define-constant ERR-ESCROW-NOT-FOUND (err u111))
(define-constant ERR-ESCROW-ALREADY-RESOLVED (err u112))

;; Platform settings
(define-constant PLATFORM-FEE-PERCENT u5) ;; 5% platform fee
(define-data-var platform-address principal 'SP000000000000000000002Q6VF78) ;; Platform treasury address

;; Licensing model types
(define-constant LICENSE-ONE-TIME u1)
(define-constant LICENSE-SUBSCRIPTION u2)
(define-constant LICENSE-USAGE-BASED u3)

;; Template data structure
;; Stores metadata and pricing information for each template
(define-map templates
  { template-id: uint }
  {
    owner: principal,
    title: (string-ascii 100),
    description: (string-utf8 500),
    price: uint,
    licensing-model: uint, ;; One of the LICENSE-* constants
    subscription-duration-blocks: uint, ;; Only used for subscription model
    usage-limit: uint, ;; Only used for usage-based model
    royalty-percent: uint, ;; Creator royalty for resales
    is-active: bool
  }
)

;; Purchases data structure
;; Tracks all purchases of templates and their details
(define-map purchases
  { template-id: uint, user: principal }
  {
    purchase-block-height: uint,
    expiration-block-height: (optional uint), ;; For subscriptions
    usage-count: uint, ;; For usage-based licenses
    usage-limit: uint, ;; For usage-based licenses
    price-paid: uint
  }
)

;; Escrow data structure
;; Used for dispute resolution and payment protection
(define-map escrow-payments
  { escrow-id: uint }
  {
    template-id: uint,
    buyer: principal,
    seller: principal,
    amount: uint,
    is-released: bool,
    is-refunded: bool,
    created-at-block: uint
  }
)

;; Track the next template ID to be assigned
(define-data-var next-template-id uint u1)

;; Track the next escrow ID to be assigned
(define-data-var next-escrow-id uint u1)

;; Total revenue generated by the platform
(define-data-var total-platform-revenue uint u0)

;; Private Functions

;; Calculate platform fee for a given amount
(define-private (calculate-platform-fee (amount uint))
  (/ (* amount PLATFORM-FEE-PERCENT) u100)
)

;; Calculate creator royalty for a given amount and percentage
(define-private (calculate-royalty (amount uint) (royalty-percent uint))
  (/ (* amount royalty-percent) u100)
)

;; Transfer STX with proper error handling
(define-private (transfer-stx (amount uint) (recipient principal))
  (if (> amount u0)
      (stx-transfer? amount tx-sender recipient)
      (ok true) ;; If amount is 0, consider transfer successful
  )
)

;; Checks if user has access to a template
(define-private (check-template-access (template-id uint) (user principal))
  (match (map-get? purchases { template-id: template-id, user: user })
    purchase (
      (match (get-template-by-id template-id)
        template (
          (let (
            (licensing-model (get licensing-model template))
          )
            (cond
              ;; For one-time purchase, access is perpetual
              (is-eq licensing-model LICENSE-ONE-TIME) (ok true)
              
              ;; For subscription, check if it's still valid
              (is-eq licensing-model LICENSE-SUBSCRIPTION) 
                (let (
                  (expiration (default-to u0 (get expiration-block-height purchase)))
                )
                  (if (>= block-height expiration)
                    ERR-SUBSCRIPTION-EXPIRED
                    (ok true)
                  )
                )
              
              ;; For usage-based, check if usage limit is reached
              (is-eq licensing-model LICENSE-USAGE-BASED)
                (let (
                  (usage-count (get usage-count purchase))
                  (usage-limit (get usage-limit purchase))
                )
                  (if (>= usage-count usage-limit)
                    ERR-ACCESS-DENIED
                    (ok true)
                  )
                )
              
              ;; Fallback for unknown licensing models
              ERR-INVALID-LICENSING-MODEL
            )
          ))
        ERR-TEMPLATE-NOT-FOUND
      )
    )
    ERR-ACCESS-DENIED
  )
)

;; Get template by ID with error handling
(define-private (get-template-by-id (template-id uint))
  (match (map-get? templates { template-id: template-id })
    template (ok template)
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Increment the next template ID
(define-private (increment-template-id)
  (let ((current-id (var-get next-template-id)))
    (var-set next-template-id (+ current-id u1))
    current-id
  )
)

;; Increment the next escrow ID
(define-private (increment-escrow-id)
  (let ((current-id (var-get next-escrow-id)))
    (var-set next-escrow-id (+ current-id u1))
    current-id
  )
)

;; Track platform revenue
(define-private (add-platform-revenue (amount uint))
  (var-set total-platform-revenue (+ (var-get total-platform-revenue) amount))
)

;; Read-only Functions

;; Get details of a template
(define-read-only (get-template (template-id uint))
  (match (map-get? templates { template-id: template-id })
    template (ok template)
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Check if a user has access to a specific template
(define-read-only (has-template-access (template-id uint) (user principal))
  (is-ok (check-template-access template-id user))
)

;; Get purchase details for a user and template
(define-read-only (get-purchase-details (template-id uint) (user principal))
  (match (map-get? purchases { template-id: template-id, user: user })
    purchase (ok purchase)
    (err u404)
  )
)

;; Get escrow details
(define-read-only (get-escrow-details (escrow-id uint))
  (match (map-get? escrow-payments { escrow-id: escrow-id })
    escrow (ok escrow)
    ERR-ESCROW-NOT-FOUND
  )
)

;; Get current platform address
(define-read-only (get-platform-address)
  (var-get platform-address)
)

;; Get total platform revenue
(define-read-only (get-total-platform-revenue)
  (var-get total-platform-revenue)
)

;; Public Functions

;; Create a new template
(define-public (create-template
  (title (string-ascii 100))
  (description (string-utf8 500))
  (price uint)
  (licensing-model uint)
  (subscription-duration-blocks uint)
  (usage-limit uint)
  (royalty-percent uint)
)
  (let (
    (template-id (increment-template-id))
  )
    ;; Validate input parameters
    (asserts! (or (is-eq licensing-model LICENSE-ONE-TIME)
                  (is-eq licensing-model LICENSE-SUBSCRIPTION)
                  (is-eq licensing-model LICENSE-USAGE-BASED))
              ERR-INVALID-LICENSING-MODEL)
    
    ;; Validate subscription duration for subscription model
    (asserts! (or (not (is-eq licensing-model LICENSE-SUBSCRIPTION))
                  (> subscription-duration-blocks u0))
              ERR-INVALID-PARAM)
    
    ;; Validate usage limit for usage-based model
    (asserts! (or (not (is-eq licensing-model LICENSE-USAGE-BASED))
                  (> usage-limit u0))
              ERR-INVALID-PARAM)
    
    ;; Validate royalty percentage is reasonable
    (asserts! (<= royalty-percent u50) ERR-INVALID-PARAM)
    
    ;; Store the template data
    (map-set templates
      { template-id: template-id }
      {
        owner: tx-sender,
        title: title,
        description: description,
        price: price,
        licensing-model: licensing-model,
        subscription-duration-blocks: subscription-duration-blocks,
        usage-limit: usage-limit,
        royalty-percent: royalty-percent,
        is-active: true
      }
    )
    (ok template-id)
  )
)

;; Update template details
(define-public (update-template
  (template-id uint)
  (title (string-ascii 100))
  (description (string-utf8 500))
  (price uint)
  (is-active bool)
)
  (match (map-get? templates { template-id: template-id })
    template (
      ;; Only the template owner can update it
      (asserts! (is-eq tx-sender (get owner template)) ERR-NOT-AUTHORIZED)
      
      ;; Update the template
      (map-set templates
        { template-id: template-id }
        (merge template {
          title: title,
          description: description,
          price: price,
          is-active: is-active
        })
      )
      (ok true)
    )
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Purchase a template with direct payment
(define-public (purchase-template (template-id uint))
  (match (map-get? templates { template-id: template-id })
    template (
      ;; Check if template is active
      (asserts! (get is-active template) ERR-NOT-FOR-SALE)
      
      ;; Check if user already purchased this template
      (asserts! (is-none (map-get? purchases { template-id: template-id, user: tx-sender }))
                ERR-ALREADY-PURCHASED)
      
      ;; Get the price and owner
      (let (
        (price (get price template))
        (owner (get owner template))
        (licensing-model (get licensing-model template))
        (platform-fee (calculate-platform-fee price))
        (creator-amount (- price platform-fee))
      )
        ;; Validate purchase parameters
        (asserts! (> price u0) ERR-INVALID-PRICE)
        (asserts! (not (is-eq tx-sender owner)) ERR-INVALID-PARAM)
        
        ;; Transfer STX from buyer to seller and platform
        (match (transfer-stx price tx-sender owner)
          success-tx (
            ;; Process platform fee payment
            (match (stx-transfer? platform-fee owner (var-get platform-address))
              success-fee (
                ;; Track platform revenue
                (add-platform-revenue platform-fee)
                
                ;; Record the purchase based on licensing model
                (match licensing-model
                  LICENSE-ONE-TIME (
                    (map-set purchases
                      { template-id: template-id, user: tx-sender }
                      {
                        purchase-block-height: block-height,
                        expiration-block-height: none,
                        usage-count: u0,
                        usage-limit: u0,
                        price-paid: price
                      }
                    )
                    (ok true)
                  )
                  LICENSE-SUBSCRIPTION (
                    (let (
                      (duration (get subscription-duration-blocks template))
                      (expiration (+ block-height duration))
                    )
                      (map-set purchases
                        { template-id: template-id, user: tx-sender }
                        {
                          purchase-block-height: block-height,
                          expiration-block-height: (some expiration),
                          usage-count: u0,
                          usage-limit: u0,
                          price-paid: price
                        }
                      )
                      (ok true)
                    )
                  )
                  LICENSE-USAGE-BASED (
                    (let (
                      (limit (get usage-limit template))
                    )
                      (map-set purchases
                        { template-id: template-id, user: tx-sender }
                        {
                          purchase-block-height: block-height,
                          expiration-block-height: none,
                          usage-count: u0,
                          usage-limit: limit,
                          price-paid: price
                        }
                      )
                      (ok true)
                    )
                  )
                  (ERR-INVALID-LICENSING-MODEL)
                )
              )
              ERR-PAYMENT-FAILED
            )
          )
          ERR-PAYMENT-FAILED
        )
      )
    )
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Create an escrow payment for a template purchase
(define-public (create-escrow-payment (template-id uint))
  (match (map-get? templates { template-id: template-id })
    template (
      ;; Check if template is active
      (asserts! (get is-active template) ERR-NOT-FOR-SALE)
      
      ;; Check if user already purchased this template
      (asserts! (is-none (map-get? purchases { template-id: template-id, user: tx-sender }))
                ERR-ALREADY-PURCHASED)
      
      (let (
        (escrow-id (increment-escrow-id))
        (price (get price template))
        (owner (get owner template))
      )
        ;; Validate escrow parameters
        (asserts! (> price u0) ERR-INVALID-PRICE)
        (asserts! (not (is-eq tx-sender owner)) ERR-INVALID-PARAM)
        
        ;; Transfer STX from buyer to contract (escrow)
        (match (stx-transfer? price tx-sender (as-contract tx-sender))
          success-tx (
            ;; Record the escrow payment
            (map-set escrow-payments
              { escrow-id: escrow-id }
              {
                template-id: template-id,
                buyer: tx-sender,
                seller: owner,
                amount: price,
                is-released: false,
                is-refunded: false,
                created-at-block: block-height
              }
            )
            (ok escrow-id)
          )
          ERR-PAYMENT-FAILED
        )
      )
    )
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Release funds from escrow to seller (completes the purchase)
(define-public (release-escrow (escrow-id uint))
  (match (map-get? escrow-payments { escrow-id: escrow-id })
    escrow (
      ;; Check if escrow is still active
      (asserts! (not (get is-released escrow)) ERR-ESCROW-ALREADY-RESOLVED)
      (asserts! (not (get is-refunded escrow)) ERR-ESCROW-ALREADY-RESOLVED)
      
      ;; Only buyer or platform can release escrow
      (asserts! (or (is-eq tx-sender (get buyer escrow))
                    (is-eq tx-sender (var-get platform-address)))
                ERR-NOT-AUTHORIZED)
      
      (let (
        (template-id (get template-id escrow))
        (buyer (get buyer escrow))
        (seller (get seller escrow))
        (amount (get amount escrow))
        (platform-fee (calculate-platform-fee amount))
        (seller-amount (- amount platform-fee))
      )
        ;; Process the template purchase
        (match (map-get? templates { template-id: template-id })
          template (
            (let (
              (licensing-model (get licensing-model template))
            )
              ;; Transfer funds from contract to seller and platform
              (match (as-contract (stx-transfer? seller-amount tx-sender seller))
                success-seller (
                  (match (as-contract (stx-transfer? platform-fee tx-sender (var-get platform-address)))
                    success-fee (
                      ;; Track platform revenue
                      (add-platform-revenue platform-fee)
                      
                      ;; Mark escrow as released
                      (map-set escrow-payments
                        { escrow-id: escrow-id }
                        (merge escrow { is-released: true })
                      )
                      
                      ;; Record the purchase based on licensing model
                      (match licensing-model
                        LICENSE-ONE-TIME (
                          (map-set purchases
                            { template-id: template-id, user: buyer }
                            {
                              purchase-block-height: block-height,
                              expiration-block-height: none,
                              usage-count: u0,
                              usage-limit: u0,
                              price-paid: amount
                            }
                          )
                          (ok true)
                        )
                        LICENSE-SUBSCRIPTION (
                          (let (
                            (duration (get subscription-duration-blocks template))
                            (expiration (+ block-height duration))
                          )
                            (map-set purchases
                              { template-id: template-id, user: buyer }
                              {
                                purchase-block-height: block-height,
                                expiration-block-height: (some expiration),
                                usage-count: u0,
                                usage-limit: u0,
                                price-paid: amount
                              }
                            )
                            (ok true)
                          )
                        )
                        LICENSE-USAGE-BASED (
                          (let (
                            (limit (get usage-limit template))
                          )
                            (map-set purchases
                              { template-id: template-id, user: buyer }
                              {
                                purchase-block-height: block-height,
                                expiration-block-height: none,
                                usage-count: u0,
                                usage-limit: limit,
                                price-paid: amount
                              }
                            )
                            (ok true)
                          )
                        )
                        (ERR-INVALID-LICENSING-MODEL)
                      )
                    )
                    ERR-PAYMENT-FAILED
                  )
                )
                ERR-PAYMENT-FAILED
              )
            )
          )
          ERR-TEMPLATE-NOT-FOUND
        )
      )
    )
    ERR-ESCROW-NOT-FOUND
  )
)

;; Refund escrow payment to buyer
(define-public (refund-escrow (escrow-id uint))
  (match (map-get? escrow-payments { escrow-id: escrow-id })
    escrow (
      ;; Check if escrow is still active
      (asserts! (not (get is-released escrow)) ERR-ESCROW-ALREADY-RESOLVED)
      (asserts! (not (get is-refunded escrow)) ERR-ESCROW-ALREADY-RESOLVED)
      
      ;; Only seller or platform can initiate refund
      (asserts! (or (is-eq tx-sender (get seller escrow))
                    (is-eq tx-sender (var-get platform-address)))
                ERR-NOT-AUTHORIZED)
      
      (let (
        (buyer (get buyer escrow))
        (amount (get amount escrow))
      )
        ;; Return funds from contract to buyer
        (match (as-contract (stx-transfer? amount tx-sender buyer))
          success (
            ;; Mark escrow as refunded
            (map-set escrow-payments
              { escrow-id: escrow-id }
              (merge escrow { is-refunded: true })
            )
            (ok true)
          )
          ERR-PAYMENT-FAILED
        )
      )
    )
    ERR-ESCROW-NOT-FOUND
  )
)

;; Renew a subscription
(define-public (renew-subscription (template-id uint))
  (match (map-get? templates { template-id: template-id })
    template (
      ;; Check if template is active
      (asserts! (get is-active template) ERR-NOT-FOR-SALE)
      
      ;; Check licensing model
      (asserts! (is-eq (get licensing-model template) LICENSE-SUBSCRIPTION)
                ERR-INVALID-LICENSING-MODEL)
      
      (let (
        (price (get price template))
        (owner (get owner template))
        (duration (get subscription-duration-blocks template))
        (platform-fee (calculate-platform-fee price))
        (creator-amount (- price platform-fee))
      )
        ;; Transfer STX from buyer to seller and platform
        (match (transfer-stx price tx-sender owner)
          success-tx (
            ;; Process platform fee payment
            (match (stx-transfer? platform-fee owner (var-get platform-address))
              success-fee (
                ;; Track platform revenue
                (add-platform-revenue platform-fee)
                
                ;; Update the subscription
                (match (map-get? purchases { template-id: template-id, user: tx-sender })
                  existing-purchase (
                    (let (
                      (current-expiration (default-to block-height (get expiration-block-height existing-purchase)))
                      (new-expiration (+ (max current-expiration block-height) duration))
                    )
                      (map-set purchases
                        { template-id: template-id, user: tx-sender }
                        (merge existing-purchase {
                          expiration-block-height: (some new-expiration),
                          price-paid: (+ (get price-paid existing-purchase) price)
                        })
                      )
                      (ok new-expiration)
                    )
                  )
                  ;; Create new purchase if not previously subscribed
                  (let (
                    (expiration (+ block-height duration))
                  )
                    (map-set purchases
                      { template-id: template-id, user: tx-sender }
                      {
                        purchase-block-height: block-height,
                        expiration-block-height: (some expiration),
                        usage-count: u0,
                        usage-limit: u0,
                        price-paid: price
                      }
                    )
                    (ok expiration)
                  )
                )
              )
              ERR-PAYMENT-FAILED
            )
          )
          ERR-PAYMENT-FAILED
        )
      )
    )
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Record usage of a usage-based template
(define-public (record-template-usage (template-id uint) (user principal))
  (match (map-get? templates { template-id: template-id })
    template (
      ;; Only template owner can record usage
      (asserts! (is-eq tx-sender (get owner template)) ERR-NOT-AUTHORIZED)
      
      ;; Check licensing model
      (asserts! (is-eq (get licensing-model template) LICENSE-USAGE-BASED)
                ERR-INVALID-LICENSING-MODEL)
      
      ;; Update usage count
      (match (map-get? purchases { template-id: template-id, user: user })
        purchase (
          (let (
            (usage-count (get usage-count purchase))
            (usage-limit (get usage-limit purchase))
          )
            ;; Verify usage limit isn't exceeded
            (asserts! (< usage-count usage-limit) ERR-ACCESS-DENIED)
            
            ;; Update usage count
            (map-set purchases
              { template-id: template-id, user: user }
              (merge purchase {
                usage-count: (+ usage-count u1)
              })
            )
            (ok (+ usage-count u1))
          )
        )
        ERR-ACCESS-DENIED
      )
    )
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Admin function to update platform address
(define-public (set-platform-address (new-address principal))
  ;; Only current platform address can update
  (asserts! (is-eq tx-sender (var-get platform-address)) ERR-NOT-AUTHORIZED)
  (var-set platform-address new-address)
  (ok true)
)